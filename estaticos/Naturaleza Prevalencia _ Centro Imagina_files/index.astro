const cerrarGlosario = document.getElementById("cerrarGlosario");
const glosario = document.getElementById("glosario");
const botonesAbrirGlosario = document.querySelectorAll(".abrirGlosario");
if (cerrarGlosario && glosario) {
  cerrarGlosario.addEventListener("click", () => {
    glosario.classList.remove("visible");
  });
}
if (botonesAbrirGlosario.length && glosario) {
  botonesAbrirGlosario.forEach((boton) => {
    boton.addEventListener("click", () => {
      glosario.classList.add("visible");
    });
  });
}

//# sourceMappingURL=data:application/json;base64,