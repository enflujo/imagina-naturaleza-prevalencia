const barras = document.querySelectorAll(".barra");
import info from "/src/modulos/info.ts";
const contenedorInfo = info.elemento();
const contenedores = document.querySelectorAll(".contenedorBarras");
const contenedorGeneral = document.querySelector(".contenedorGrafica");
const crearMensaje = (pais, porcentaje, numero, lado) => {
  const genero = lado === "izq" ? "female" : "male";
  let mensaje = `In <span class="resaltar agrandar1-2 subrayar">${pais}</span>,`;
  mensaje += `<span class="resaltar agrandar1-4${+porcentaje >= 10 ? " grave" : ""}"> ${porcentaje}%</span>`;
  mensaje += ` of <span class="resaltar agrandar1-2">${numero}</span> <span class="resaltar subrayar">${genero}</span> victims reported poly-victimization.`;
  return mensaje;
};
crearInteracciones();
if (contenedores && contenedores.length) {
  contenedores.forEach((elemento) => {
    elemento.addEventListener("mousemove", (evento) => {
      Object.assign(contenedorInfo.style, {
        top: `${evento.pageY - contenedorInfo.clientHeight - 10}px`,
        left: `${evento.pageX}px`
      });
    });
  });
}
if (barras && barras.length) {
  barras.forEach((barra) => {
    const pais = barra.dataset.pais;
    const porcentaje = barra.dataset.porcentaje;
    const numero = barra.dataset.numero;
    const lado = barra.dataset.lado;
    if (!pais || !porcentaje || !numero || !lado) return;
    barra.addEventListener("mouseover", () => {
      contenedorInfo.innerHTML = crearMensaje(pais, porcentaje, numero, lado);
      info.mostrar();
      if (!contenedorGeneral) return;
      contenedorGeneral.classList.add("interactuando");
      barra.classList.add("activo");
    });
    barra.addEventListener("mouseout", () => {
      info.esconder();
      if (!contenedorGeneral) return;
      contenedorGeneral.classList.remove("interactuando");
      barra.classList.remove("activo");
    });
  });
}
function crearInteracciones() {
  if (!contenedorGeneral) return;
  const polyTanzania = document.getElementById("polyTanzania");
  if (polyTanzania) {
    polyTanzania.addEventListener("mouseenter", () => {
      const barras2 = contenedorGeneral.querySelectorAll('[data-pais="Tanzania"]');
      if (!barras2.length) return;
      contenedorGeneral.classList.add("interactuando");
      barras2.forEach((barra) => {
        barra.classList.add("activo");
      });
    });
    polyTanzania.addEventListener("mouseleave", () => {
      const barras2 = contenedorGeneral.querySelectorAll('[data-pais="Tanzania"]');
      if (!barras2.length) return;
      contenedorGeneral.classList.remove("interactuando");
      barras2.forEach((barra) => {
        barra.classList.remove("activo");
      });
    });
  }
  const polyHaiti = document.getElementById("polyHaiti");
  if (polyHaiti) {
    polyHaiti.addEventListener("mouseenter", () => {
      const barras2 = contenedorGeneral.querySelectorAll('[data-pais="Haiti"]');
      if (!barras2.length) return;
      contenedorGeneral.classList.add("interactuando");
      barras2.forEach((barra) => {
        barra.classList.add("activo");
      });
    });
    polyHaiti.addEventListener("mouseleave", () => {
      const barras2 = contenedorGeneral.querySelectorAll('[data-pais="Haiti"]');
      if (!barras2.length) return;
      contenedorGeneral.classList.remove("interactuando");
      barras2.forEach((barra) => {
        barra.classList.remove("activo");
      });
    });
  }
  const polyMalawi = document.getElementById("polyMalawi");
  if (polyMalawi) {
    polyMalawi.addEventListener("mouseenter", () => {
      const barras2 = contenedorGeneral.querySelectorAll('[data-pais="Malawi"]');
      if (!barras2.length) return;
      contenedorGeneral.classList.add("interactuando");
      barras2.forEach((barra) => {
        barra.classList.add("activo");
      });
    });
    polyMalawi.addEventListener("mouseleave", () => {
      const barras2 = contenedorGeneral.querySelectorAll('[data-pais="Malawi"]');
      if (!barras2.length) return;
      contenedorGeneral.classList.remove("interactuando");
      barras2.forEach((barra) => {
        barra.classList.remove("activo");
      });
    });
  }
}

//# sourceMappingURL=data:application/json;base64,