import { edadVictimas } from "/src/cerebro/datos.ts?t=1732593999676";
import info from "/src/modulos/info.ts";
import { definirDims } from "/src/utilidades/ayudasConexiones.ts";
import { convertirEscala } from "/node_modules/.vite/deps/@enflujo_alquimia.js?v=605cc3c2";
const svg = document.querySelector("#conexiones4");
if (!svg) throw new Error("No se encontrÃ³ el elemento SVG");
const semillas = svg.querySelector(".semillas");
const conexiones = svg.querySelector(".conexiones");
const contenedorInfo = info.elemento();
const { mujeres, hombres } = edadVictimas.vida.entre13y17;
const { alto, margenY, espacioEntre, margenCentro } = definirDims(600);
const llaves = Object.keys(edadVictimas.nombres).filter((nombre) => nombre !== "n");
const coloresGrupos = {
  menor14: "#69d2e7",
  entre14y15: "#ecd078",
  entre16y17: "#83af9b"
};
const crearMensaje = (conexion, nombreGrupo, lado) => {
  const genero = lado === "izq" ? "female" : "male";
  let mensaje = `In <span class="resaltar agrandar1-2 subrayar">${conexion.pais}</span>,`;
  mensaje += `<span class="resaltar agrandar1-4${conexion.valor >= 10 ? " grave" : ""}"> ${conexion.valor}%</span> of <span class="resaltar subrayar">${genero} victims</span>`;
  mensaje += ` say that their first perpetration happened between the ages of: <span class="resaltar agrandar1-2">${nombreGrupo}</span>.`;
  return mensaje;
};
const origenesMujeres = procesarGrupoEtario(mujeres);
const origenesHombres = procesarGrupoEtario(hombres);
const paises = [];
[...origenesMujeres[0].conexiones, ...origenesHombres[0].conexiones].forEach((lugar, i) => {
  if (!paises.find((pais) => pais.nombre === lugar.pais)) {
    paises.push({ nombre: lugar.pais, y: margenY + espacioEntre * (i + 1) + alto(i * 2) });
  }
});
definirConexiones();
crearGrupo(origenesMujeres, "izq");
crearGrupo(origenesHombres, "der");
crearInteracciones();
paises.forEach((pais) => {
  const grupo = document.createElementNS("http://www.w3.org/2000/svg", "g");
  grupo.setAttribute("class", "pais");
  grupo.setAttribute("style", `transform: translate(50%, ${pais.y}px);`);
  const eje = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  eje.setAttribute("x", `-50`);
  eje.setAttribute("y", "0");
  eje.setAttribute("width", "100");
  eje.setAttribute("height", `${alto(10.5)}`);
  eje.setAttribute("fill", "#5b5e5d");
  const nombre = document.createElementNS("http://www.w3.org/2000/svg", "text");
  nombre.setAttribute("x", "0");
  nombre.setAttribute("y", `${alto(6.5)}px`);
  nombre.setAttribute("font-weight", "bold");
  nombre.setAttribute("font-size", "15");
  nombre.setAttribute("text-anchor", "middle");
  nombre.setAttribute("fill", "rgba(0,0,0,1)");
  nombre.innerHTML = pais.nombre;
  grupo.appendChild(eje);
  grupo.appendChild(nombre);
  svg?.appendChild(grupo);
});
function crearGrupo(grupo, lado) {
  grupo.forEach((origen) => {
    const grupo2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
    grupo2.setAttribute("class", "origen");
    const xGrupo = lado === "izq" ? "3px" : "calc(100% - 5px)";
    grupo2.setAttribute(
      "style",
      `transform: translate(${xGrupo}, ${origen.y}px);fill:${coloresGrupos[origen.llave]};`
    );
    const nombreGrupo = edadVictimas.nombres[origen.llave];
    const semilla = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    semilla.setAttribute("x", lado === "izq" ? "0" : "-40px");
    semilla.setAttribute("y", "0");
    semilla.setAttribute("width", "40px");
    semilla.setAttribute("height", `${alto(origen.valor)}px`);
    const nombre = document.createElementNS("http://www.w3.org/2000/svg", "text");
    nombre.setAttribute("x", "0");
    nombre.setAttribute("y", "-17px");
    nombre.setAttribute("font-weight", "bold");
    nombre.setAttribute("font-size", "15");
    if (lado === "der") nombre.setAttribute("text-anchor", "end");
    nombre.innerHTML = nombreGrupo;
    const valor = document.createElementNS("http://www.w3.org/2000/svg", "text");
    valor.setAttribute("x", "0");
    valor.setAttribute("y", "-3px");
    valor.setAttribute("font-size", "11");
    if (lado === "der") valor.setAttribute("text-anchor", "end");
    valor.innerHTML = `${origen.valor}%`;
    origen.conexiones.forEach((conexion) => {
      const elemento = document.createElementNS("http://www.w3.org/2000/svg", "path");
      elemento.setAttribute("class", `conexion c${origen.llave}`);
      elemento.setAttribute("d", curva(conexion, lado));
      elemento.setAttribute("fill", conexion.color);
      elemento.setAttribute("data-datos", JSON.stringify(conexion));
      elemento.setAttribute("data-lado", lado);
      elemento.addEventListener("mouseenter", () => {
        contenedorInfo.innerHTML = crearMensaje(conexion, nombreGrupo, lado);
        svg?.classList.add("interactuando");
        info.mostrar();
        elemento.classList.add("activo");
      });
      elemento.addEventListener("mouseleave", () => {
        svg?.querySelector(".conexion.activo")?.classList.remove("activo");
        info.esconder();
        svg?.classList.remove("interactuando");
      });
      elemento.addEventListener("mousemove", (evento) => {
        Object.assign(contenedorInfo.style, {
          top: `${evento.pageY - contenedorInfo.clientHeight - 10}px`,
          left: `${evento.pageX}px`
        });
      });
      conexiones?.appendChild(elemento);
    });
    grupo2.appendChild(semilla);
    grupo2.appendChild(nombre);
    grupo2.appendChild(valor);
    semillas?.append(grupo2);
  });
}
function procesarGrupoEtario(grupo) {
  let yAcumulado = 0;
  return llaves.sort((a, b) => grupo.totales[b] - grupo.totales[a]).map((nombre, i) => {
    const valor = grupo.totales[nombre];
    const y = espacioEntre * (i + 1) + margenY + yAcumulado;
    const acumulados = { menor14: 0, entre14y15: 0, entre16y17: 0 };
    const conexiones2 = grupo.datos.map((lugar) => {
      const valorLinea = lugar[nombre];
      acumulados[nombre] += valorLinea;
      return {
        pais: lugar.pais,
        origen: nombre,
        valor: valorLinea,
        origenY1: 0,
        origenY2: 0,
        destinoY1: 0,
        destinoY2: 0,
        color: coloresGrupos[nombre]
      };
    }).sort((a, b) => b.valor - a.valor);
    const respuesta = {
      llave: nombre,
      y,
      valor,
      conexiones: conexiones2,
      totalOrigen: acumulados[nombre] | 0
    };
    yAcumulado += alto(valor);
    return respuesta;
  });
}
function definirConexiones() {
  origenesMujeres.forEach((origen, i) => {
    const escalaYOrigen = (n) => alto(convertirEscala(n, 0, origen.totalOrigen, 0, origen.valor - 4.4));
    const escalaYDestino = (n) => alto(convertirEscala(n, 0, 100, 0, 10));
    origen.conexiones.forEach((lugar, ii) => {
      const pais = paises.find((pais2) => pais2.nombre === lugar.pais);
      const y2 = i > 0 ? origenesMujeres[i - 1].conexiones.find((l) => l.pais === lugar.pais)?.destinoY2 : pais?.y;
      lugar.origenY1 = ii === 0 ? origen.y : origen.conexiones[ii - 1].origenY2;
      lugar.origenY2 = lugar.origenY1;
      lugar.origenY2 += escalaYOrigen(lugar.valor);
      lugar.destinoY1 = y2 || 0;
      lugar.destinoY2 = lugar.destinoY1;
      lugar.destinoY2 += escalaYDestino(lugar.valor) | 0;
    });
  });
  origenesMujeres.reverse();
  origenesHombres.forEach((destino, i) => {
    const escalaYOrigen = (n) => alto(convertirEscala(n, 0, 100, 0, 10));
    const escalaYDestino = (n) => alto(convertirEscala(n, 0, destino.totalOrigen, 0, destino.valor - 2));
    destino.conexiones.forEach((lugar, ii) => {
      const pais = paises.find((pais2) => pais2.nombre === lugar.pais);
      const y1 = i === 0 ? pais?.y : origenesHombres[i - 1].conexiones.find((l) => l.pais === lugar.pais)?.origenY2;
      lugar.origenY1 = y1 || 0;
      lugar.origenY2 = lugar.origenY1;
      lugar.origenY2 += escalaYOrigen(lugar.valor);
      lugar.destinoY1 = ii === 0 ? destino.y : destino.conexiones[ii - 1].destinoY2;
      lugar.destinoY2 = lugar.destinoY1;
      lugar.destinoY2 += escalaYDestino(lugar.valor) | 0;
    });
  });
  origenesHombres.reverse();
}
function curva(conexion, lado) {
  const anchoGrafica = svg?.clientWidth || 0;
  const mitad = anchoGrafica / 2;
  const centroCurva = lado === "izq" ? mitad / 2 - margenCentro : mitad + margenCentro + mitad / 2;
  const xOrigen = lado === "izq" ? 40 : mitad + margenCentro;
  const xDestino = lado === "izq" ? mitad - margenCentro : anchoGrafica - 44;
  const x1 = centroCurva;
  const x2 = centroCurva;
  const y1 = conexion.origenY1;
  const y2 = conexion.destinoY1;
  let forma = `M${xOrigen},${conexion.origenY1}`;
  forma += ` C${x1},${y1}`;
  forma += ` ${x2},${y2}`;
  forma += ` ${xDestino},${conexion.destinoY1}`;
  forma += `L${xDestino},${conexion.destinoY2}`;
  const x3 = centroCurva;
  const y3 = conexion.destinoY2;
  const x4 = centroCurva;
  const y4 = conexion.origenY2;
  forma += ` C${x3},${y3}`;
  forma += ` ${x4},${y4}`;
  forma += ` ${xOrigen},${conexion.origenY2}`;
  forma += "Z";
  return forma;
}
window.addEventListener("resize", () => {
  if (!svg) return;
  const conexiones2 = svg.querySelectorAll(".conexion");
  if (conexiones2.length) {
    conexiones2.forEach((conexion) => {
      const { datos, lado } = conexion.dataset;
      if (datos && lado) conexion.setAttribute("d", curva(JSON.parse(datos), lado));
    });
  }
});
function crearInteracciones() {
}

//# sourceMappingURL=data:application/json;base64,