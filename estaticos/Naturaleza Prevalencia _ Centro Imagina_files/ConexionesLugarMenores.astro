import { lugarViolencia } from "/src/cerebro/datos.ts?t=1732593999676";
import info from "/src/modulos/info.ts";
import { definirDims } from "/src/utilidades/ayudasConexiones.ts";
import { convertirEscala } from "/node_modules/.vite/deps/@enflujo_alquimia.js?v=605cc3c2";
const svg = document.querySelector("#conexiones6");
if (!svg) throw new Error("No se encontrÃ³ el elemento SVG");
const semillas = svg.querySelector(".semillas");
const conexiones = svg.querySelector(".conexiones");
const contenedorInfo = info.elemento();
const { mujeres, hombres } = lugarViolencia.vida.entre13y17;
const { alto, margenY, espacioEntre, margenCentro } = definirDims(svg.clientHeight || 0);
const llaves = Object.keys(lugarViolencia.nombres).filter((nombre) => nombre !== "n");
const coloresGrupos = {
  casa: "#69d2e7",
  fuera: "#ecd078",
  otro: "#83af9b"
};
const crearMensaje = (conexion, nombreGrupo, lado) => {
  const genero = lado === "izq" ? "female" : "male";
  let mensaje = `In <span class="resaltar agrandar1-2 subrayar">${conexion.pais}</span>,`;
  mensaje += `<span class="resaltar agrandar1-4${conexion.valor >= 10 ? " grave" : ""}"> ${conexion.valor}%</span> of <span class="resaltar subrayar">${genero} victims</span>`;
  mensaje += ` say that their first perpetration happened${nombreGrupo !== "Outdoor" ? " at" : ""}: <span class="resaltar agrandar1-2">${nombreGrupo}</span>.`;
  return mensaje;
};
const origenesMujeres = procesarGrupoEtario(mujeres);
const origenesHombres = procesarGrupoEtario(hombres);
const paises = [];
[...origenesMujeres[0].conexiones, ...origenesHombres[0].conexiones].forEach((lugar, i) => {
  if (!paises.find((pais) => pais.nombre === lugar.pais)) {
    paises.push({ nombre: lugar.pais, y: margenY + espacioEntre * (i + 1) + alto(i * 7) });
  }
});
definirConexiones();
crearGrupo(origenesMujeres, "izq");
crearGrupo(origenesHombres, "der");
crearInteracciones();
paises.forEach((pais) => {
  const grupo = document.createElementNS("http://www.w3.org/2000/svg", "g");
  grupo.setAttribute("class", "pais");
  grupo.setAttribute("style", `transform: translate(50%, ${pais.y}px);`);
  const eje = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  eje.setAttribute("x", `-50`);
  eje.setAttribute("y", "0");
  eje.setAttribute("width", "100");
  eje.setAttribute("height", `${alto(10.5)}`);
  eje.setAttribute("fill", "#5b5e5d");
  const nombre = document.createElementNS("http://www.w3.org/2000/svg", "text");
  nombre.setAttribute("x", "0");
  nombre.setAttribute("y", `${alto(6.5)}px`);
  nombre.setAttribute("font-weight", "bold");
  nombre.setAttribute("font-size", "15");
  nombre.setAttribute("text-anchor", "middle");
  nombre.setAttribute("fill", "rgba(0,0,0,1)");
  nombre.innerHTML = pais.nombre;
  grupo.appendChild(eje);
  grupo.appendChild(nombre);
  svg?.appendChild(grupo);
});
function crearGrupo(grupo, lado) {
  grupo.forEach((origen) => {
    const grupo2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
    grupo2.setAttribute("class", "origen");
    const xGrupo = lado === "izq" ? "3px" : "calc(100% - 5px)";
    grupo2.setAttribute(
      "style",
      `transform: translate(${xGrupo}, ${origen.y}px);fill:${coloresGrupos[origen.llave]};`
    );
    const nombreGrupo = lugarViolencia.nombres[origen.llave];
    const semilla = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    semilla.setAttribute("x", lado === "izq" ? "0" : "-40px");
    semilla.setAttribute("y", "0");
    semilla.setAttribute("width", "40px");
    semilla.setAttribute("height", `${alto(origen.valor)}px`);
    const nombre = document.createElementNS("http://www.w3.org/2000/svg", "text");
    nombre.setAttribute("x", "0");
    nombre.setAttribute("y", "-17px");
    nombre.setAttribute("font-weight", "bold");
    nombre.setAttribute("font-size", "15");
    if (lado === "der") nombre.setAttribute("text-anchor", "end");
    nombre.innerHTML = nombreGrupo;
    const valor = document.createElementNS("http://www.w3.org/2000/svg", "text");
    valor.setAttribute("x", "0");
    valor.setAttribute("y", "-3px");
    valor.setAttribute("font-size", "11");
    if (lado === "der") valor.setAttribute("text-anchor", "end");
    valor.innerHTML = `${origen.valor}%`;
    origen.conexiones.forEach((conexion) => {
      const elemento = document.createElementNS("http://www.w3.org/2000/svg", "path");
      elemento.setAttribute("class", `conexion c${origen.llave}`);
      elemento.setAttribute("d", curva(conexion, lado));
      elemento.setAttribute("fill", conexion.color);
      elemento.setAttribute("data-datos", JSON.stringify(conexion));
      elemento.setAttribute("data-lado", lado);
      elemento.addEventListener("mouseenter", () => {
        contenedorInfo.innerHTML = crearMensaje(conexion, nombreGrupo, lado);
        svg?.classList.add("interactuando");
        info.mostrar();
        elemento.classList.add("activo");
      });
      elemento.addEventListener("mouseleave", () => {
        svg?.querySelector(".conexion.activo")?.classList.remove("activo");
        info.esconder();
        svg?.classList.remove("interactuando");
      });
      elemento.addEventListener("mousemove", (evento) => {
        Object.assign(contenedorInfo.style, {
          top: `${evento.pageY - contenedorInfo.clientHeight - 10}px`,
          left: `${evento.pageX}px`
        });
      });
      conexiones?.appendChild(elemento);
    });
    grupo2.appendChild(semilla);
    grupo2.appendChild(nombre);
    grupo2.appendChild(valor);
    semillas?.append(grupo2);
  });
}
function procesarGrupoEtario(grupo) {
  let yAcumulado = 0;
  return llaves.sort((a, b) => grupo.totales[b] - grupo.totales[a]).map((nombre, i) => {
    const valor = grupo.totales[nombre];
    const y = espacioEntre * (i + 1) + margenY + yAcumulado;
    const acumulados = { casa: 0, fuera: 0, otro: 0 };
    const conexiones2 = grupo.datos.map((lugar) => {
      const valorLinea = lugar[nombre];
      acumulados[nombre] += valorLinea;
      return {
        pais: lugar.pais,
        origen: nombre,
        valor: valorLinea,
        origenY1: 0,
        origenY2: 0,
        destinoY1: 0,
        destinoY2: 0,
        color: coloresGrupos[nombre]
      };
    }).sort((a, b) => b.valor - a.valor);
    const respuesta = {
      llave: nombre,
      y,
      valor,
      conexiones: conexiones2,
      totalOrigen: acumulados[nombre] | 0
    };
    yAcumulado += alto(valor);
    return respuesta;
  });
}
function definirConexiones() {
  origenesMujeres.forEach((origen, i) => {
    const escalaYOrigen = (n) => alto(convertirEscala(n, 0, origen.totalOrigen, 0, origen.valor - 2));
    const escalaYDestino = (n) => alto(convertirEscala(n, 0, 100, 0, 10));
    origen.conexiones.forEach((lugar, ii) => {
      const pais = paises.find((pais2) => pais2.nombre === lugar.pais);
      const y2 = i > 0 ? origenesMujeres[i - 1].conexiones.find((l) => l.pais === lugar.pais)?.destinoY2 : pais?.y;
      lugar.origenY1 = ii === 0 ? origen.y : origen.conexiones[ii - 1].origenY2;
      lugar.origenY2 = lugar.origenY1;
      lugar.origenY2 += escalaYOrigen(lugar.valor);
      lugar.destinoY1 = y2 || 0;
      lugar.destinoY2 = lugar.destinoY1;
      lugar.destinoY2 += escalaYDestino(lugar.valor) | 0;
    });
  });
  origenesMujeres.reverse();
  origenesHombres.forEach((destino, i) => {
    const escalaYOrigen = (n) => alto(convertirEscala(n, 0, 100, 0, 10));
    const escalaYDestino = (n) => alto(convertirEscala(n, 0, destino.totalOrigen, 0, destino.valor - 1));
    destino.conexiones.forEach((lugar, ii) => {
      const pais = paises.find((pais2) => pais2.nombre === lugar.pais);
      const y1 = i === 0 ? pais?.y : origenesHombres[i - 1].conexiones.find((l) => l.pais === lugar.pais)?.origenY2;
      lugar.origenY1 = y1 || 0;
      lugar.origenY2 = lugar.origenY1;
      lugar.origenY2 += escalaYOrigen(lugar.valor);
      lugar.destinoY1 = ii === 0 ? destino.y : destino.conexiones[ii - 1].destinoY2;
      lugar.destinoY2 = lugar.destinoY1;
      lugar.destinoY2 += escalaYDestino(lugar.valor) | 0;
    });
  });
  origenesHombres.reverse();
}
function curva(conexion, lado) {
  const anchoGrafica = svg?.clientWidth || 0;
  const mitad = anchoGrafica / 2;
  const centroCurva = lado === "izq" ? mitad / 2 - margenCentro : mitad + margenCentro + mitad / 2;
  const xOrigen = lado === "izq" ? 40 : mitad + margenCentro;
  const xDestino = lado === "izq" ? mitad - margenCentro : anchoGrafica - 44;
  const x1 = centroCurva;
  const x2 = centroCurva;
  const y1 = conexion.origenY1;
  const y2 = conexion.destinoY1;
  let forma = `M${xOrigen},${conexion.origenY1}`;
  forma += ` C${x1},${y1}`;
  forma += ` ${x2},${y2}`;
  forma += ` ${xDestino},${conexion.destinoY1}`;
  forma += `L${xDestino},${conexion.destinoY2}`;
  const x3 = centroCurva;
  const y3 = conexion.destinoY2;
  const x4 = centroCurva;
  const y4 = conexion.origenY2;
  forma += ` C${x3},${y3}`;
  forma += ` ${x4},${y4}`;
  forma += ` ${xOrigen},${conexion.origenY2}`;
  forma += "Z";
  return forma;
}
window.addEventListener("resize", () => {
  if (!svg) return;
  const conexiones2 = svg.querySelectorAll(".conexion");
  if (conexiones2.length) {
    conexiones2.forEach((conexion) => {
      const { datos, lado } = conexion.dataset;
      if (datos && lado) conexion.setAttribute("d", curva(JSON.parse(datos), lado));
    });
  }
});
function crearInteracciones() {
  const boton = document.getElementById("lugar");
  if (boton) {
    boton.addEventListener("mouseenter", () => {
      if (!svg) return;
      const conexiones2 = svg.querySelectorAll(".conexion");
      svg.classList.add("interactuando");
      conexiones2.forEach((conexion) => {
        conexion.classList.remove("activo");
      });
      const casa = svg.querySelectorAll(`.conexion.ccasa`);
      if (casa.length) {
        casa.forEach((nodo) => nodo.classList.add("activo"));
      }
    });
    boton.addEventListener("mouseleave", () => {
      if (!svg) return;
      const conexiones2 = svg.querySelectorAll(".conexion");
      svg.classList.remove("interactuando");
      conexiones2.forEach((conexion) => {
        conexion.classList.remove("activo");
      });
    });
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbmV4aW9uZXNMdWdhck1lbm9yZXMuYXN0cm8iXSwic291cmNlc0NvbnRlbnQiOlsiLS0tXHJcblxyXG4tLS1cclxuXHJcbjxkaXYgY2xhc3M9XCJjb250ZW5lZG9yQ29uZXhpb25lc1wiPlxyXG4gIDxzdmcgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiNjAwcHhcIiBpZD1cImNvbmV4aW9uZXM2XCIgY2xhc3M9XCJncmFmaWNhQ29uZXhpb25lc1wiPlxyXG4gICAgPHRleHQgeD1cIjI1JVwiIHk9XCIyMHB4XCIgY2xhc3M9XCJub21icmVDb2x1bW5hXCIgdGV4dC1hbmNob3I9XCJtaWRkbGVcIj5EYXRhIGZvciBmZW1hbGUgdmljdGltczwvdGV4dD5cclxuICAgIDx0ZXh0IHg9XCI3NSVcIiB5PVwiMjBweFwiIGNsYXNzPVwibm9tYnJlQ29sdW1uYVwiIHRleHQtYW5jaG9yPVwibWlkZGxlXCI+RGF0YSBmb3IgbWFsZSB2aWN0aW1zPC90ZXh0PlxyXG4gICAgPGcgY2xhc3M9XCJjb25leGlvbmVzXCI+PC9nPlxyXG4gICAgPGcgY2xhc3M9XCJzZW1pbGxhc1wiPjwvZz5cclxuICA8L3N2Zz5cclxuPC9kaXY+XHJcblxyXG48c2NyaXB0PlxyXG4gIGltcG9ydCB7IGx1Z2FyVmlvbGVuY2lhIH0gZnJvbSAnQC9jZXJlYnJvL2RhdG9zJztcclxuICBpbXBvcnQgaW5mbyBmcm9tICdAL21vZHVsb3MvaW5mbyc7XHJcbiAgaW1wb3J0IHR5cGUgeyBDb25leGlvbiwgR3J1cG9Db25leGlvbiwgTGxhdmVzTFYsIEdydXBvTFYgfSBmcm9tICdAL3RpcG9zJztcclxuICBpbXBvcnQgeyBkZWZpbmlyRGltcyB9IGZyb20gJ0AvdXRpbGlkYWRlcy9heXVkYXNDb25leGlvbmVzJztcclxuICBpbXBvcnQgeyBjb252ZXJ0aXJFc2NhbGEgfSBmcm9tICdAZW5mbHVqby9hbHF1aW1pYSc7XHJcblxyXG4gIGNvbnN0IHN2ZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8U1ZHQUVsZW1lbnQ+KCcjY29uZXhpb25lczYnKTtcclxuICBpZiAoIXN2ZykgdGhyb3cgbmV3IEVycm9yKCdObyBzZSBlbmNvbnRyw7MgZWwgZWxlbWVudG8gU1ZHJyk7XHJcbiAgY29uc3Qgc2VtaWxsYXMgPSBzdmcucXVlcnlTZWxlY3RvcjxTVkdHRWxlbWVudD4oJy5zZW1pbGxhcycpO1xyXG4gIGNvbnN0IGNvbmV4aW9uZXMgPSBzdmcucXVlcnlTZWxlY3RvcjxTVkdHRWxlbWVudD4oJy5jb25leGlvbmVzJyk7XHJcblxyXG4gIGNvbnN0IGNvbnRlbmVkb3JJbmZvID0gaW5mby5lbGVtZW50bygpO1xyXG4gIGNvbnN0IHsgbXVqZXJlcywgaG9tYnJlcyB9ID0gbHVnYXJWaW9sZW5jaWEudmlkYS5lbnRyZTEzeTE3O1xyXG4gIGNvbnN0IHsgYWx0bywgbWFyZ2VuWSwgZXNwYWNpb0VudHJlLCBtYXJnZW5DZW50cm8gfSA9IGRlZmluaXJEaW1zKHN2Zy5jbGllbnRIZWlnaHQgfHwgMCk7XHJcbiAgY29uc3QgbGxhdmVzID0gT2JqZWN0LmtleXMobHVnYXJWaW9sZW5jaWEubm9tYnJlcykuZmlsdGVyKChub21icmUpID0+IG5vbWJyZSAhPT0gJ24nKTtcclxuXHJcbiAgY29uc3QgY29sb3Jlc0dydXBvcyA9IHtcclxuICAgIGNhc2E6ICcjNjlkMmU3JyxcclxuICAgIGZ1ZXJhOiAnI2VjZDA3OCcsXHJcbiAgICBvdHJvOiAnIzgzYWY5YicsXHJcbiAgfTtcclxuICBjb25zdCBjcmVhck1lbnNhamUgPSAoY29uZXhpb246IENvbmV4aW9uLCBub21icmVHcnVwbzogc3RyaW5nLCBsYWRvOiAnaXpxJyB8ICdkZXInKSA9PiB7XHJcbiAgICBjb25zdCBnZW5lcm8gPSBsYWRvID09PSAnaXpxJyA/ICdmZW1hbGUnIDogJ21hbGUnO1xyXG4gICAgbGV0IG1lbnNhamUgPSBgSW4gPHNwYW4gY2xhc3M9XCJyZXNhbHRhciBhZ3JhbmRhcjEtMiBzdWJyYXlhclwiPiR7Y29uZXhpb24ucGFpc308L3NwYW4+LGA7XHJcbiAgICBtZW5zYWplICs9IGA8c3BhbiBjbGFzcz1cInJlc2FsdGFyIGFncmFuZGFyMS00JHtjb25leGlvbi52YWxvciA+PSAxMCA/ICcgZ3JhdmUnIDogJyd9XCI+ICR7Y29uZXhpb24udmFsb3J9JTwvc3Bhbj4gb2YgPHNwYW4gY2xhc3M9XCJyZXNhbHRhciBzdWJyYXlhclwiPiR7Z2VuZXJvfSB2aWN0aW1zPC9zcGFuPmA7XHJcbiAgICBtZW5zYWplICs9IGAgc2F5IHRoYXQgdGhlaXIgZmlyc3QgcGVycGV0cmF0aW9uIGhhcHBlbmVkJHtub21icmVHcnVwbyAhPT0gJ091dGRvb3InID8gJyBhdCcgOiAnJ306IDxzcGFuIGNsYXNzPVwicmVzYWx0YXIgYWdyYW5kYXIxLTJcIj4ke25vbWJyZUdydXBvfTwvc3Bhbj4uYDtcclxuICAgIHJldHVybiBtZW5zYWplO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9yaWdlbmVzTXVqZXJlcyA9IHByb2Nlc2FyR3J1cG9FdGFyaW8obXVqZXJlcyk7XHJcbiAgY29uc3Qgb3JpZ2VuZXNIb21icmVzID0gcHJvY2VzYXJHcnVwb0V0YXJpbyhob21icmVzKTtcclxuICBjb25zdCBwYWlzZXM6IHsgbm9tYnJlOiBzdHJpbmc7IHk6IG51bWJlciB9W10gPSBbXTtcclxuXHJcbiAgWy4uLm9yaWdlbmVzTXVqZXJlc1swXS5jb25leGlvbmVzLCAuLi5vcmlnZW5lc0hvbWJyZXNbMF0uY29uZXhpb25lc10uZm9yRWFjaCgobHVnYXIsIGkpID0+IHtcclxuICAgIGlmICghcGFpc2VzLmZpbmQoKHBhaXMpID0+IHBhaXMubm9tYnJlID09PSBsdWdhci5wYWlzKSkge1xyXG4gICAgICBwYWlzZXMucHVzaCh7IG5vbWJyZTogbHVnYXIucGFpcywgeTogbWFyZ2VuWSArIGVzcGFjaW9FbnRyZSAqIChpICsgMSkgKyBhbHRvKGkgKiA3KSB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZGVmaW5pckNvbmV4aW9uZXMoKTtcclxuICBjcmVhckdydXBvKG9yaWdlbmVzTXVqZXJlcywgJ2l6cScpO1xyXG4gIGNyZWFyR3J1cG8ob3JpZ2VuZXNIb21icmVzLCAnZGVyJyk7XHJcbiAgY3JlYXJJbnRlcmFjY2lvbmVzKCk7XHJcblxyXG4gIHBhaXNlcy5mb3JFYWNoKChwYWlzKSA9PiB7XHJcbiAgICBjb25zdCBncnVwbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gICAgZ3J1cG8uc2V0QXR0cmlidXRlKCdjbGFzcycsICdwYWlzJyk7XHJcbiAgICBncnVwby5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgJHtwYWlzLnl9cHgpO2ApO1xyXG5cclxuICAgIGNvbnN0IGVqZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncmVjdCcpO1xyXG4gICAgZWplLnNldEF0dHJpYnV0ZSgneCcsIGAtNTBgKTtcclxuICAgIGVqZS5zZXRBdHRyaWJ1dGUoJ3knLCAnMCcpO1xyXG4gICAgZWplLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMTAwJyk7XHJcbiAgICBlamUuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBgJHthbHRvKDEwLjUpfWApO1xyXG4gICAgZWplLnNldEF0dHJpYnV0ZSgnZmlsbCcsICcjNWI1ZTVkJyk7XHJcblxyXG4gICAgY29uc3Qgbm9tYnJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICd0ZXh0Jyk7XHJcbiAgICBub21icmUuc2V0QXR0cmlidXRlKCd4JywgJzAnKTtcclxuICAgIG5vbWJyZS5zZXRBdHRyaWJ1dGUoJ3knLCBgJHthbHRvKDYuNSl9cHhgKTtcclxuICAgIG5vbWJyZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcclxuICAgIG5vbWJyZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsICcxNScpO1xyXG4gICAgbm9tYnJlLnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7XHJcbiAgICBub21icmUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3JnYmEoMCwwLDAsMSknKTtcclxuICAgIG5vbWJyZS5pbm5lckhUTUwgPSBwYWlzLm5vbWJyZTtcclxuXHJcbiAgICBncnVwby5hcHBlbmRDaGlsZChlamUpO1xyXG4gICAgZ3J1cG8uYXBwZW5kQ2hpbGQobm9tYnJlKTtcclxuXHJcbiAgICBzdmc/LmFwcGVuZENoaWxkKGdydXBvKTtcclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gY3JlYXJHcnVwbyhncnVwbzogR3J1cG9Db25leGlvbltdLCBsYWRvOiAnaXpxJyB8ICdkZXInKSB7XHJcbiAgICBncnVwby5mb3JFYWNoKChvcmlnZW4pID0+IHtcclxuICAgICAgY29uc3QgZ3J1cG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuICAgICAgZ3J1cG8uc2V0QXR0cmlidXRlKCdjbGFzcycsICdvcmlnZW4nKTtcclxuICAgICAgY29uc3QgeEdydXBvID0gbGFkbyA9PT0gJ2l6cScgPyAnM3B4JyA6ICdjYWxjKDEwMCUgLSA1cHgpJztcclxuICAgICAgZ3J1cG8uc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICdzdHlsZScsXHJcbiAgICAgICAgYHRyYW5zZm9ybTogdHJhbnNsYXRlKCR7eEdydXBvfSwgJHtvcmlnZW4ueX1weCk7ZmlsbDoke2NvbG9yZXNHcnVwb3Nbb3JpZ2VuLmxsYXZlIGFzIGtleW9mIExsYXZlc0xWXX07YFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBub21icmVHcnVwbyA9IGx1Z2FyVmlvbGVuY2lhLm5vbWJyZXNbb3JpZ2VuLmxsYXZlIGFzIGtleW9mIExsYXZlc0xWXTtcclxuICAgICAgY29uc3Qgc2VtaWxsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncmVjdCcpO1xyXG4gICAgICBzZW1pbGxhLnNldEF0dHJpYnV0ZSgneCcsIGxhZG8gPT09ICdpenEnID8gJzAnIDogJy00MHB4Jyk7XHJcbiAgICAgIHNlbWlsbGEuc2V0QXR0cmlidXRlKCd5JywgJzAnKTtcclxuICAgICAgc2VtaWxsYS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzQwcHgnKTtcclxuICAgICAgc2VtaWxsYS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGAke2FsdG8ob3JpZ2VuLnZhbG9yKX1weGApO1xyXG5cclxuICAgICAgY29uc3Qgbm9tYnJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICd0ZXh0Jyk7XHJcbiAgICAgIG5vbWJyZS5zZXRBdHRyaWJ1dGUoJ3gnLCAnMCcpO1xyXG4gICAgICBub21icmUuc2V0QXR0cmlidXRlKCd5JywgJy0xN3B4Jyk7XHJcbiAgICAgIG5vbWJyZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcclxuICAgICAgbm9tYnJlLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzE1Jyk7XHJcbiAgICAgIGlmIChsYWRvID09PSAnZGVyJykgbm9tYnJlLnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnZW5kJyk7XHJcbiAgICAgIG5vbWJyZS5pbm5lckhUTUwgPSBub21icmVHcnVwbztcclxuXHJcbiAgICAgIGNvbnN0IHZhbG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICd0ZXh0Jyk7XHJcbiAgICAgIHZhbG9yLnNldEF0dHJpYnV0ZSgneCcsICcwJyk7XHJcbiAgICAgIHZhbG9yLnNldEF0dHJpYnV0ZSgneScsICctM3B4Jyk7XHJcbiAgICAgIHZhbG9yLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzExJyk7XHJcbiAgICAgIGlmIChsYWRvID09PSAnZGVyJykgdmFsb3Iuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsICdlbmQnKTtcclxuICAgICAgdmFsb3IuaW5uZXJIVE1MID0gYCR7b3JpZ2VuLnZhbG9yfSVgO1xyXG5cclxuICAgICAgb3JpZ2VuLmNvbmV4aW9uZXMuZm9yRWFjaCgoY29uZXhpb24pID0+IHtcclxuICAgICAgICBjb25zdCBlbGVtZW50byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG4gICAgICAgIGVsZW1lbnRvLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBgY29uZXhpb24gYyR7b3JpZ2VuLmxsYXZlfWApO1xyXG4gICAgICAgIGVsZW1lbnRvLnNldEF0dHJpYnV0ZSgnZCcsIGN1cnZhKGNvbmV4aW9uLCBsYWRvKSk7XHJcbiAgICAgICAgZWxlbWVudG8uc2V0QXR0cmlidXRlKCdmaWxsJywgY29uZXhpb24uY29sb3IpO1xyXG4gICAgICAgIGVsZW1lbnRvLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRvcycsIEpTT04uc3RyaW5naWZ5KGNvbmV4aW9uKSk7XHJcbiAgICAgICAgZWxlbWVudG8uc2V0QXR0cmlidXRlKCdkYXRhLWxhZG8nLCBsYWRvKTtcclxuXHJcbiAgICAgICAgZWxlbWVudG8uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuICAgICAgICAgIGNvbnRlbmVkb3JJbmZvLmlubmVySFRNTCA9IGNyZWFyTWVuc2FqZShjb25leGlvbiwgbm9tYnJlR3J1cG8sIGxhZG8pO1xyXG4gICAgICAgICAgc3ZnPy5jbGFzc0xpc3QuYWRkKCdpbnRlcmFjdHVhbmRvJyk7XHJcbiAgICAgICAgICBpbmZvLm1vc3RyYXIoKTtcclxuICAgICAgICAgIGVsZW1lbnRvLmNsYXNzTGlzdC5hZGQoJ2FjdGl2bycpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBlbGVtZW50by5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4gICAgICAgICAgc3ZnPy5xdWVyeVNlbGVjdG9yKCcuY29uZXhpb24uYWN0aXZvJyk/LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2bycpO1xyXG4gICAgICAgICAgaW5mby5lc2NvbmRlcigpO1xyXG4gICAgICAgICAgc3ZnPy5jbGFzc0xpc3QucmVtb3ZlKCdpbnRlcmFjdHVhbmRvJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVsZW1lbnRvLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChldmVudG8pID0+IHtcclxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29udGVuZWRvckluZm8uc3R5bGUsIHtcclxuICAgICAgICAgICAgdG9wOiBgJHtldmVudG8ucGFnZVkgLSBjb250ZW5lZG9ySW5mby5jbGllbnRIZWlnaHQgLSAxMH1weGAsXHJcbiAgICAgICAgICAgIGxlZnQ6IGAke2V2ZW50by5wYWdlWH1weGAsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25leGlvbmVzPy5hcHBlbmRDaGlsZChlbGVtZW50byk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZ3J1cG8uYXBwZW5kQ2hpbGQoc2VtaWxsYSk7XHJcbiAgICAgIGdydXBvLmFwcGVuZENoaWxkKG5vbWJyZSk7XHJcbiAgICAgIGdydXBvLmFwcGVuZENoaWxkKHZhbG9yKTtcclxuXHJcbiAgICAgIHNlbWlsbGFzPy5hcHBlbmQoZ3J1cG8pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHByb2Nlc2FyR3J1cG9FdGFyaW8oZ3J1cG86IEdydXBvTFYpIHtcclxuICAgIGxldCB5QWN1bXVsYWRvID0gMDtcclxuXHJcbiAgICByZXR1cm4gbGxhdmVzXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBncnVwby50b3RhbGVzW2IgYXMga2V5b2YgTGxhdmVzTFZdIC0gZ3J1cG8udG90YWxlc1thIGFzIGtleW9mIExsYXZlc0xWXSlcclxuICAgICAgLm1hcCgobm9tYnJlLCBpKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsb3IgPSBncnVwby50b3RhbGVzW25vbWJyZSBhcyBrZXlvZiBMbGF2ZXNMVl07XHJcbiAgICAgICAgY29uc3QgeSA9IGVzcGFjaW9FbnRyZSAqIChpICsgMSkgKyBtYXJnZW5ZICsgeUFjdW11bGFkbztcclxuICAgICAgICBjb25zdCBhY3VtdWxhZG9zOiBMbGF2ZXNMViA9IHsgY2FzYTogMCwgZnVlcmE6IDAsIG90cm86IDAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgY29uZXhpb25lcyA9IGdydXBvLmRhdG9zXHJcbiAgICAgICAgICAubWFwKChsdWdhcikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB2YWxvckxpbmVhID0gbHVnYXJbbm9tYnJlIGFzIGtleW9mIExsYXZlc0xWXTtcclxuICAgICAgICAgICAgYWN1bXVsYWRvc1tub21icmUgYXMga2V5b2YgTGxhdmVzTFZdICs9IHZhbG9yTGluZWE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIHBhaXM6IGx1Z2FyLnBhaXMsXHJcbiAgICAgICAgICAgICAgb3JpZ2VuOiBub21icmUsXHJcbiAgICAgICAgICAgICAgdmFsb3I6IHZhbG9yTGluZWEsXHJcbiAgICAgICAgICAgICAgb3JpZ2VuWTE6IDAsXHJcbiAgICAgICAgICAgICAgb3JpZ2VuWTI6IDAsXHJcbiAgICAgICAgICAgICAgZGVzdGlub1kxOiAwLFxyXG4gICAgICAgICAgICAgIGRlc3Rpbm9ZMjogMCxcclxuICAgICAgICAgICAgICBjb2xvcjogY29sb3Jlc0dydXBvc1tub21icmUgYXMga2V5b2YgTGxhdmVzTFZdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnZhbG9yIC0gYS52YWxvcik7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3B1ZXN0YSA9IHtcclxuICAgICAgICAgIGxsYXZlOiBub21icmUgYXMga2V5b2YgTGxhdmVzTFYsXHJcbiAgICAgICAgICB5LFxyXG4gICAgICAgICAgdmFsb3IsXHJcbiAgICAgICAgICBjb25leGlvbmVzLFxyXG4gICAgICAgICAgdG90YWxPcmlnZW46IGFjdW11bGFkb3Nbbm9tYnJlIGFzIGtleW9mIExsYXZlc0xWXSB8IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB5QWN1bXVsYWRvICs9IGFsdG8odmFsb3IpO1xyXG4gICAgICAgIHJldHVybiByZXNwdWVzdGE7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmaW5pckNvbmV4aW9uZXMoKSB7XHJcbiAgICBvcmlnZW5lc011amVyZXMuZm9yRWFjaCgob3JpZ2VuLCBpKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVzY2FsYVlPcmlnZW4gPSAobjogbnVtYmVyKSA9PiBhbHRvKGNvbnZlcnRpckVzY2FsYShuLCAwLCBvcmlnZW4udG90YWxPcmlnZW4sIDAsIG9yaWdlbi52YWxvciAtIDIpKTtcclxuICAgICAgY29uc3QgZXNjYWxhWURlc3Rpbm8gPSAobjogbnVtYmVyKSA9PiBhbHRvKGNvbnZlcnRpckVzY2FsYShuLCAwLCAxMDAsIDAsIDEwKSk7XHJcbiAgICAgIG9yaWdlbi5jb25leGlvbmVzLmZvckVhY2goKGx1Z2FyLCBpaSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhaXMgPSBwYWlzZXMuZmluZCgocGFpcykgPT4gcGFpcy5ub21icmUgPT09IGx1Z2FyLnBhaXMpO1xyXG4gICAgICAgIGNvbnN0IHkyID0gaSA+IDAgPyBvcmlnZW5lc011amVyZXNbaSAtIDFdLmNvbmV4aW9uZXMuZmluZCgobCkgPT4gbC5wYWlzID09PSBsdWdhci5wYWlzKT8uZGVzdGlub1kyIDogcGFpcz8ueTtcclxuXHJcbiAgICAgICAgbHVnYXIub3JpZ2VuWTEgPSBpaSA9PT0gMCA/IG9yaWdlbi55IDogb3JpZ2VuLmNvbmV4aW9uZXNbaWkgLSAxXS5vcmlnZW5ZMjtcclxuICAgICAgICBsdWdhci5vcmlnZW5ZMiA9IGx1Z2FyLm9yaWdlblkxO1xyXG4gICAgICAgIGx1Z2FyLm9yaWdlblkyICs9IGVzY2FsYVlPcmlnZW4obHVnYXIudmFsb3IpO1xyXG4gICAgICAgIGx1Z2FyLmRlc3Rpbm9ZMSA9IHkyIHx8IDA7XHJcbiAgICAgICAgbHVnYXIuZGVzdGlub1kyID0gbHVnYXIuZGVzdGlub1kxO1xyXG4gICAgICAgIGx1Z2FyLmRlc3Rpbm9ZMiArPSBlc2NhbGFZRGVzdGlubyhsdWdhci52YWxvcikgfCAwO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIG9yaWdlbmVzTXVqZXJlcy5yZXZlcnNlKCk7IC8vIGludmVydGlyIG9yZGVuIHBhcmEgcXVlIHNlIHBpbnRlbiBsYXMgbcOhcyBncnVlc2FzIGVuY2ltYSBkZSBsYXMgbWVub3NcclxuXHJcbiAgICBvcmlnZW5lc0hvbWJyZXMuZm9yRWFjaCgoZGVzdGlubywgaSkgPT4ge1xyXG4gICAgICBjb25zdCBlc2NhbGFZT3JpZ2VuID0gKG46IG51bWJlcikgPT4gYWx0byhjb252ZXJ0aXJFc2NhbGEobiwgMCwgMTAwLCAwLCAxMCkpO1xyXG4gICAgICBjb25zdCBlc2NhbGFZRGVzdGlubyA9IChuOiBudW1iZXIpID0+IGFsdG8oY29udmVydGlyRXNjYWxhKG4sIDAsIGRlc3Rpbm8udG90YWxPcmlnZW4sIDAsIGRlc3Rpbm8udmFsb3IgLSAxKSk7XHJcblxyXG4gICAgICBkZXN0aW5vLmNvbmV4aW9uZXMuZm9yRWFjaCgobHVnYXIsIGlpKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGFpcyA9IHBhaXNlcy5maW5kKChwYWlzKSA9PiBwYWlzLm5vbWJyZSA9PT0gbHVnYXIucGFpcyk7XHJcbiAgICAgICAgY29uc3QgeTEgPSBpID09PSAwID8gcGFpcz8ueSA6IG9yaWdlbmVzSG9tYnJlc1tpIC0gMV0uY29uZXhpb25lcy5maW5kKChsKSA9PiBsLnBhaXMgPT09IGx1Z2FyLnBhaXMpPy5vcmlnZW5ZMjtcclxuXHJcbiAgICAgICAgbHVnYXIub3JpZ2VuWTEgPSB5MSB8fCAwO1xyXG4gICAgICAgIGx1Z2FyLm9yaWdlblkyID0gbHVnYXIub3JpZ2VuWTE7XHJcbiAgICAgICAgbHVnYXIub3JpZ2VuWTIgKz0gZXNjYWxhWU9yaWdlbihsdWdhci52YWxvcik7XHJcbiAgICAgICAgbHVnYXIuZGVzdGlub1kxID0gaWkgPT09IDAgPyBkZXN0aW5vLnkgOiBkZXN0aW5vLmNvbmV4aW9uZXNbaWkgLSAxXS5kZXN0aW5vWTI7XHJcbiAgICAgICAgbHVnYXIuZGVzdGlub1kyID0gbHVnYXIuZGVzdGlub1kxO1xyXG4gICAgICAgIGx1Z2FyLmRlc3Rpbm9ZMiArPSBlc2NhbGFZRGVzdGlubyhsdWdhci52YWxvcikgfCAwO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIG9yaWdlbmVzSG9tYnJlcy5yZXZlcnNlKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjdXJ2YShjb25leGlvbjogQ29uZXhpb24sIGxhZG86ICdpenEnIHwgJ2RlcicpIHtcclxuICAgIGNvbnN0IGFuY2hvR3JhZmljYSA9IHN2Zz8uY2xpZW50V2lkdGggfHwgMDtcclxuICAgIGNvbnN0IG1pdGFkID0gYW5jaG9HcmFmaWNhIC8gMjtcclxuICAgIGNvbnN0IGNlbnRyb0N1cnZhID0gbGFkbyA9PT0gJ2l6cScgPyBtaXRhZCAvIDIgLSBtYXJnZW5DZW50cm8gOiBtaXRhZCArIG1hcmdlbkNlbnRybyArIG1pdGFkIC8gMjtcclxuICAgIGNvbnN0IHhPcmlnZW4gPSBsYWRvID09PSAnaXpxJyA/IDQwIDogbWl0YWQgKyBtYXJnZW5DZW50cm87XHJcbiAgICBjb25zdCB4RGVzdGlubyA9IGxhZG8gPT09ICdpenEnID8gbWl0YWQgLSBtYXJnZW5DZW50cm8gOiBhbmNob0dyYWZpY2EgLSA0NDtcclxuICAgIGNvbnN0IHgxID0gY2VudHJvQ3VydmE7XHJcbiAgICBjb25zdCB4MiA9IGNlbnRyb0N1cnZhO1xyXG4gICAgY29uc3QgeTEgPSBjb25leGlvbi5vcmlnZW5ZMTtcclxuICAgIGNvbnN0IHkyID0gY29uZXhpb24uZGVzdGlub1kxO1xyXG4gICAgbGV0IGZvcm1hID0gYE0ke3hPcmlnZW59LCR7Y29uZXhpb24ub3JpZ2VuWTF9YDtcclxuXHJcbiAgICBmb3JtYSArPSBgIEMke3gxfSwke3kxfWA7XHJcbiAgICBmb3JtYSArPSBgICR7eDJ9LCR7eTJ9YDtcclxuICAgIGZvcm1hICs9IGAgJHt4RGVzdGlub30sJHtjb25leGlvbi5kZXN0aW5vWTF9YDtcclxuICAgIGZvcm1hICs9IGBMJHt4RGVzdGlub30sJHtjb25leGlvbi5kZXN0aW5vWTJ9YDtcclxuICAgIGNvbnN0IHgzID0gY2VudHJvQ3VydmE7XHJcbiAgICBjb25zdCB5MyA9IGNvbmV4aW9uLmRlc3Rpbm9ZMjtcclxuICAgIGNvbnN0IHg0ID0gY2VudHJvQ3VydmE7XHJcbiAgICBjb25zdCB5NCA9IGNvbmV4aW9uLm9yaWdlblkyO1xyXG4gICAgZm9ybWEgKz0gYCBDJHt4M30sJHt5M31gO1xyXG4gICAgZm9ybWEgKz0gYCAke3g0fSwke3k0fWA7XHJcbiAgICBmb3JtYSArPSBgICR7eE9yaWdlbn0sJHtjb25leGlvbi5vcmlnZW5ZMn1gO1xyXG4gICAgZm9ybWEgKz0gJ1onO1xyXG4gICAgcmV0dXJuIGZvcm1hO1xyXG4gIH1cclxuXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgIGlmICghc3ZnKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgY29uZXhpb25lcyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsPFNWR1BhdGhFbGVtZW50PignLmNvbmV4aW9uJyk7XHJcblxyXG4gICAgaWYgKGNvbmV4aW9uZXMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbmV4aW9uZXMuZm9yRWFjaCgoY29uZXhpb24pID0+IHtcclxuICAgICAgICBjb25zdCB7IGRhdG9zLCBsYWRvIH0gPSBjb25leGlvbi5kYXRhc2V0O1xyXG4gICAgICAgIGlmIChkYXRvcyAmJiBsYWRvKSBjb25leGlvbi5zZXRBdHRyaWJ1dGUoJ2QnLCBjdXJ2YShKU09OLnBhcnNlKGRhdG9zKSwgbGFkbyBhcyAnaXpxJyB8ICdkZXInKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBjcmVhckludGVyYWNjaW9uZXMoKSB7XHJcbiAgICBjb25zdCBib3RvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsdWdhcicpO1xyXG4gICAgaWYgKGJvdG9uKSB7XHJcbiAgICAgIGJvdG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFzdmcpIHJldHVybjtcclxuICAgICAgICBjb25zdCBjb25leGlvbmVzID0gc3ZnLnF1ZXJ5U2VsZWN0b3JBbGw8U1ZHUGF0aEVsZW1lbnQ+KCcuY29uZXhpb24nKTtcclxuICAgICAgICBzdmcuY2xhc3NMaXN0LmFkZCgnaW50ZXJhY3R1YW5kbycpO1xyXG4gICAgICAgIGNvbmV4aW9uZXMuZm9yRWFjaCgoY29uZXhpb24pID0+IHtcclxuICAgICAgICAgIGNvbmV4aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2bycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGNhc2EgPSBzdmcucXVlcnlTZWxlY3RvckFsbChgLmNvbmV4aW9uLmNjYXNhYCk7XHJcbiAgICAgICAgaWYgKGNhc2EubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjYXNhLmZvckVhY2goKG5vZG8pID0+IG5vZG8uY2xhc3NMaXN0LmFkZCgnYWN0aXZvJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBib3Rvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4gICAgICAgIGlmICghc3ZnKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgY29uZXhpb25lcyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsPFNWR1BhdGhFbGVtZW50PignLmNvbmV4aW9uJyk7XHJcbiAgICAgICAgc3ZnLmNsYXNzTGlzdC5yZW1vdmUoJ2ludGVyYWN0dWFuZG8nKTtcclxuICAgICAgICBjb25leGlvbmVzLmZvckVhY2goKGNvbmV4aW9uKSA9PiB7XHJcbiAgICAgICAgICBjb25leGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdhY3Rpdm8nKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIGlzOmdsb2JhbD5cclxuICAuZ3JhZmljYUNvbmV4aW9uZXMge1xyXG4gICAgbWFyZ2luLXRvcDogNGVtO1xyXG4gICAgdGV4dCB7XHJcbiAgICAgIGZpbGw6IHdoaXRlO1xyXG4gICAgfVxyXG4gICAgLmNvbmV4aW9uIHtcclxuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMTVzIGVhc2UtaW4tb3V0O1xyXG4gICAgfVxyXG5cclxuICAgICYuaW50ZXJhY3R1YW5kbyB7XHJcbiAgICAgIC5jb25leGlvbiB7XHJcbiAgICAgICAgb3BhY2l0eTogMC4yO1xyXG5cclxuICAgICAgICAmLmFjdGl2byB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5vcmlnZW4ge1xyXG4gICAgICBmb250LXNpemU6IDAuNzVlbTtcclxuICAgIH1cclxuXHJcbiAgICAubm9tYnJlQ29sdW1uYSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPiJdLCJtYXBwaW5ncyI6IkFBY0UsU0FBUyxzQkFBc0I7QUFDL0IsT0FBTyxVQUFVO0FBRWpCLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMsdUJBQXVCO0FBRWhDLE1BQU0sTUFBTSxTQUFTLGNBQTJCLGNBQWM7QUFDOUQsSUFBSSxDQUFDLElBQUssT0FBTSxJQUFJLE1BQU0sZ0NBQStCO0FBQ3pELE1BQU0sV0FBVyxJQUFJLGNBQTJCLFdBQVc7QUFDM0Qs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S0FBSyxTQUFTO0FBQ3BCLE1BQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxTQUFTLFFBQVE7QUFFNUMsV0FBUyxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3RCLFdBQVMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNyQixXQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsU0FBUztBQUMzQyxXQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsU0FBUztBQUMzQyxRQUFNLEtBQUs7QUFDWCxRQUFNLEtBQUssU0FBUztBQUNwQixRQUFNLEtBQUs7QUFDWCxRQUFNLEtBQUssU0FBUztBQUNwQixXQUFTLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDdEIsV0FBUyxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3JCLFdBQVMsSUFBSSxPQUFPLElBQUksU0FBUyxRQUFRO0FBQ3pDLFdBQVM7QUFDVCxTQUFPO0FBQ1Q7QUFFQSxPQUFPLGlCQUFpQixVQUFVLE1BQU07QUFDdEMsTUFBSSxDQUFDLElBQUs7QUFFVixRQUFNRCxjQUFhLElBQUksaUJBQWlDLFdBQVc7QUFFbkUsTUFBSUEsWUFBVyxRQUFRO0FBQ3JCLElBQUFBLFlBQVcsUUFBUSxDQUFDLGFBQWE7QUFDL0IsWUFBTSxFQUFFLE9BQU8sS0FBSyxJQUFJLFNBQVM7QUFDakMsVUFBSSxTQUFTLEtBQU0sVUFBUyxhQUFhLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxHQUFHLElBQXFCLENBQUM7SUFDL0YsQ0FBQztFQUNIO0FBQ0YsQ0FBQztBQUVELFNBQVMscUJBQXFCO0FBQzVCLFFBQU0sUUFBUSxTQUFTLGVBQWUsT0FBTztBQUM3QyxNQUFJLE9BQU87QUFDVCxVQUFNLGlCQUFpQixjQUFjLE1BQU07QUFDekMsVUFBSSxDQUFDLElBQUs7QUFDVixZQUFNQSxjQUFhLElBQUksaUJBQWlDLFdBQVc7QUFDbkUsVUFBSSxVQUFVLElBQUksZUFBZTtBQUNqQyxNQUFBQSxZQUFXLFFBQVEsQ0FBQyxhQUFhO0FBQy9CLGlCQUFTLFVBQVUsT0FBTyxRQUFRO01BQ3BDLENBQUM7QUFDRCxZQUFNLE9BQU8sSUFBSSxpQkFBaUIsaUJBQWlCO0FBQ25ELFVBQUksS0FBSyxRQUFRO0FBQ2YsYUFBSyxRQUFRLENBQUMsU0FBUyxLQUFLLFVBQVUsSUFBSSxRQUFRLENBQUM7TUFDckQ7SUFDRixDQUFDO0FBRUQsVUFBTSxpQkFBaUIsY0FBYyxNQUFNO0FBQ3pDLFVBQUksQ0FBQyxJQUFLO0FBQ1YsWUFBTUEsY0FBYSxJQUFJLGlCQUFpQyxXQUFXO0FBQ25FLFVBQUksVUFBVSxPQUFPLGVBQWU7QUFDcEMsTUFBQUEsWUFBVyxRQUFRLENBQUMsYUFBYTtBQUMvQixpQkFBUyxVQUFVLE9BQU8sUUFBUTtNQUNwQyxDQUFDO0lBQ0gsQ0FBQztFQUNIO0FBQ0Y7IiwibmFtZXMiOlsiZ3J1cG8iLCJjb25leGlvbmVzIiwicGFpcyJdfQ==